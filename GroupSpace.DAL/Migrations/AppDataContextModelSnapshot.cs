// <auto-generated />
using System;
using GroupSpace.DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupSpace.DAL.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("GroupSpace.DAL.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CoverPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RoleTypeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleTypeGroupRoleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleTypeGroupRoleTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.GroupRoleType", b =>
                {
                    b.Property<int>("GroupRoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupRoleTypeId");

                    b.ToTable("GroupRoleTypes");

                    b.HasData(
                        new
                        {
                            GroupRoleTypeId = 1,
                            Text = "User"
                        },
                        new
                        {
                            GroupRoleTypeId = 2,
                            Text = "Moderator"
                        });
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.GroupType", b =>
                {
                    b.Property<int>("GroupTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("GroupTypeId");

                    b.ToTable("GroupTypes");

                    b.HasData(
                        new
                        {
                            GroupTypeId = 1,
                            Text = "Humour"
                        },
                        new
                        {
                            GroupTypeId = 2,
                            Text = "Science"
                        },
                        new
                        {
                            GroupTypeId = 3,
                            Text = "Travel"
                        },
                        new
                        {
                            GroupTypeId = 4,
                            Text = "Buy & sell"
                        },
                        new
                        {
                            GroupTypeId = 5,
                            Text = "Business"
                        },
                        new
                        {
                            GroupTypeId = 6,
                            Text = "Style"
                        },
                        new
                        {
                            GroupTypeId = 7,
                            Text = "Animals"
                        },
                        new
                        {
                            GroupTypeId = 8,
                            Text = "Sport"
                        },
                        new
                        {
                            GroupTypeId = 9,
                            Text = "fitness"
                        },
                        new
                        {
                            GroupTypeId = 10,
                            Text = "Education"
                        },
                        new
                        {
                            GroupTypeId = 11,
                            Text = "Arts"
                        },
                        new
                        {
                            GroupTypeId = 12,
                            Text = "Entertainment"
                        },
                        new
                        {
                            GroupTypeId = 13,
                            Text = "Food & drink"
                        });
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.JoinRequest", b =>
                {
                    b.Property<int>("JoinRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JoinRequestId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfLikes")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.PostComment", b =>
                {
                    b.Property<int>("PostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumOfLikes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.ReportPost", b =>
                {
                    b.Property<int>("ReportPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfTimes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportPostId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportPosts");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("PersonalImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("SubID")
                        .HasMaxLength(200)
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("SubID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.Group", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.GroupType", "GroupType")
                        .WithMany("Groups")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.GroupMember", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.GroupRoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeGroupRoleTypeId");

                    b.HasOne("GroupSpace.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("RoleType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.JoinRequest", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.Group", null)
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.Post", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.Group", null)
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.PostComment", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.ReportPost", b =>
                {
                    b.HasOne("GroupSpace.DAL.Entities.Group", null)
                        .WithMany("ReportPosts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupSpace.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("JoinRequests");

                    b.Navigation("Posts");

                    b.Navigation("ReportPosts");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.GroupType", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("GroupSpace.DAL.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
